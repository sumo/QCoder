package avcodec;
import com.ochafik.lang.jnaerator.runtime.Structure;
import com.sun.jna.Pointer;
/**
 * <i>native declaration : src/main/headers/libavcodec/opt.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class AVOption extends Structure<AVOption, AVOption.ByValue, AVOption.ByReference > {
	/// C type : const char*
	public Pointer name;
	/**
	 * short English help text<br>
	 * @todo What about other languages?<br>
	 * C type : const char*
	 */
	public Pointer help;
	/**
	 * The offset relative to the context structure where the option<br>
	 * value is stored. It should be 0 for named constants.
	 */
	public int offset;
	/**
	 * @see AVOptionType<br>
	 * C type : AVOptionType
	 */
	public int type;
	/// the default value for scalar options
	public double default_val;
	/// < minimum valid value for the option
	public double min;
	/// < maximum valid value for the option
	public double max;
	public int flags;
	/**
	 * The logical unit to which the option belongs. Non-constant<br>
	 * options and corresponding named constants share the same<br>
	 * unit. May be NULL.<br>
	 * C type : const char*
	 */
	public Pointer unit;
	public AVOption() {
		super();
		initFieldOrder();
	}
	protected void initFieldOrder() {
		setFieldOrder(new java.lang.String[]{"name", "help", "offset", "type", "default_val", "min", "max", "flags", "unit"});
	}
	/**
	 * @param name C type : const char*<br>
	 * @param help short English help text<br>
	 * @todo What about other languages?<br>
	 * C type : const char*<br>
	 * @param offset The offset relative to the context structure where the option<br>
	 * value is stored. It should be 0 for named constants.<br>
	 * @param type @see AVOptionType<br>
	 * C type : AVOptionType<br>
	 * @param default_val the default value for scalar options<br>
	 * @param min < minimum valid value for the option<br>
	 * @param max < maximum valid value for the option<br>
	 * @param unit The logical unit to which the option belongs. Non-constant<br>
	 * options and corresponding named constants share the same<br>
	 * unit. May be NULL.<br>
	 * C type : const char*
	 */
	public AVOption(Pointer name, Pointer help, int offset, int type, double default_val, double min, double max, int flags, Pointer unit) {
		super();
		this.name = name;
		this.help = help;
		this.offset = offset;
		this.type = type;
		this.default_val = default_val;
		this.min = min;
		this.max = max;
		this.flags = flags;
		this.unit = unit;
		initFieldOrder();
	}
	protected ByReference newByReference() { return new ByReference(); }
	protected ByValue newByValue() { return new ByValue(); }
	protected AVOption newInstance() { return new AVOption(); }
	public static AVOption[] newArray(int arrayLength) {
		return Structure.newArray(AVOption.class, arrayLength);
	}
	public static class ByReference extends AVOption implements Structure.ByReference {
		
	};
	public static class ByValue extends AVOption implements Structure.ByValue {
		
	};
}
