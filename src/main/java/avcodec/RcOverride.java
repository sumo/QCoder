package avcodec;
import com.ochafik.lang.jnaerator.runtime.Structure;
/**
 * <i>native declaration : src/main/headers/libavcodec/avcodec.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class RcOverride extends Structure<RcOverride, RcOverride.ByValue, RcOverride.ByReference > {
	public int start_frame;
	public int end_frame;
	/// If this is 0 then quality_factor will be used instead.
	public int qscale;
	public float quality_factor;
	public RcOverride() {
		super();
		initFieldOrder();
	}
	protected void initFieldOrder() {
		setFieldOrder(new java.lang.String[]{"start_frame", "end_frame", "qscale", "quality_factor"});
	}
	/// @param qscale If this is 0 then quality_factor will be used instead.
	public RcOverride(int start_frame, int end_frame, int qscale, float quality_factor) {
		super();
		this.start_frame = start_frame;
		this.end_frame = end_frame;
		this.qscale = qscale;
		this.quality_factor = quality_factor;
		initFieldOrder();
	}
	protected ByReference newByReference() { return new ByReference(); }
	protected ByValue newByValue() { return new ByValue(); }
	protected RcOverride newInstance() { return new RcOverride(); }
	public static RcOverride[] newArray(int arrayLength) {
		return Structure.newArray(RcOverride.class, arrayLength);
	}
	public static class ByReference extends RcOverride implements Structure.ByReference {
		
	};
	public static class ByValue extends RcOverride implements Structure.ByValue {
		
	};
}
