package swscale;
import com.ochafik.lang.jnaerator.runtime.Structure;
import com.sun.jna.ptr.DoubleByReference;
/**
 * <i>native declaration : src/main/headers/libswscale/swscale.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class SwsVector extends Structure<SwsVector, SwsVector.ByValue, SwsVector.ByReference > {
	/**
	 * < pointer to the list of coefficients<br>
	 * C type : double*
	 */
	public DoubleByReference coeff;
	/// < number of coefficients in the vector
	public int length;
	public SwsVector() {
		super();
		initFieldOrder();
	}
	protected void initFieldOrder() {
		setFieldOrder(new java.lang.String[]{"coeff", "length"});
	}
	/**
	 * @param coeff < pointer to the list of coefficients<br>
	 * C type : double*<br>
	 * @param length < number of coefficients in the vector
	 */
	public SwsVector(DoubleByReference coeff, int length) {
		super();
		this.coeff = coeff;
		this.length = length;
		initFieldOrder();
	}
	protected ByReference newByReference() { return new ByReference(); }
	protected ByValue newByValue() { return new ByValue(); }
	protected SwsVector newInstance() { return new SwsVector(); }
	public static SwsVector[] newArray(int arrayLength) {
		return Structure.newArray(SwsVector.class, arrayLength);
	}
	public static class ByReference extends SwsVector implements Structure.ByReference {
		
	};
	public static class ByValue extends SwsVector implements Structure.ByValue {
		
	};
}
