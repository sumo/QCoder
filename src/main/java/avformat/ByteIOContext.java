package avformat;
import avformat.AvformatLibrary.checksum;
import com.ochafik.lang.jnaerator.runtime.Structure;
import com.sun.jna.Callback;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
/**
 * <i>native declaration : src/main/headers/libavformat/avio.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class ByteIOContext extends Structure<ByteIOContext, ByteIOContext.ByValue, ByteIOContext.ByReference > {
	/// C type : unsigned char*
	public Pointer buffer;
	public int buffer_size;
	/// C type : unsigned char*
	public Pointer buf_ptr;
	/// C type : unsigned char*
	public Pointer buf_end;
	/// C type : void*
	public Pointer opaque;
	/// C type : read_packet_callback
	public ByteIOContext.read_packet_callback read_packet;
	/// C type : write_packet_callback
	public ByteIOContext.write_packet_callback write_packet;
	/// C type : seek_callback
	public ByteIOContext.seek_callback seek;
	/// < position in the file of the current buffer
	public long pos;
	/// < true if the next seek should flush
	public int must_flush;
	/// < true if eof reached
	public int eof_reached;
	/// < true if open for writing
	public int write_flag;
	public int is_streamed;
	public int max_packet_size;
	public NativeLong checksum;
	/// C type : unsigned char*
	public Pointer checksum_ptr;
	/// C type : update_checksum_callback
	public ByteIOContext.update_checksum_callback update_checksum;
	/// < contains the error code or 0 if no error happened
	public int error;
	/// C type : read_pause_callback
	public ByteIOContext.read_pause_callback read_pause;
	/// C type : read_seek_callback
	public ByteIOContext.read_seek_callback read_seek;
	/// <i>native declaration : src/main/headers/libavformat/avio.h</i>
	public interface read_packet_callback extends Callback {
		int apply(Pointer opaque, Pointer buf, int buf_size);
	};
	/// <i>native declaration : src/main/headers/libavformat/avio.h</i>
	public interface write_packet_callback extends Callback {
		int apply(Pointer opaque, Pointer buf, int buf_size);
	};
	/// <i>native declaration : src/main/headers/libavformat/avio.h</i>
	public interface seek_callback extends Callback {
		long apply(Pointer opaque, long offset, int whence);
	};
	/// <i>native declaration : src/main/headers/libavformat/avio.h</i>
	public interface update_checksum_callback extends Callback {
		NativeLong apply(checksum checksum1, Pointer buf, int size);
	};
	/// <i>native declaration : src/main/headers/libavformat/avio.h</i>
	public interface read_pause_callback extends Callback {
		int apply(Pointer opaque, int pause);
	};
	/// <i>native declaration : src/main/headers/libavformat/avio.h</i>
	public interface read_seek_callback extends Callback {
		long apply(Pointer opaque, int stream_index, long timestamp, int flags);
	};
	public ByteIOContext() {
		super();
		initFieldOrder();
	}
	protected void initFieldOrder() {
		setFieldOrder(new java.lang.String[]{"buffer", "buffer_size", "buf_ptr", "buf_end", "opaque", "read_packet", "write_packet", "seek", "pos", "must_flush", "eof_reached", "write_flag", "is_streamed", "max_packet_size", "checksum", "checksum_ptr", "update_checksum", "error", "read_pause", "read_seek"});
	}
	protected ByReference newByReference() { return new ByReference(); }
	protected ByValue newByValue() { return new ByValue(); }
	protected ByteIOContext newInstance() { return new ByteIOContext(); }
	public static ByteIOContext[] newArray(int arrayLength) {
		return Structure.newArray(ByteIOContext.class, arrayLength);
	}
	public static class ByReference extends ByteIOContext implements Structure.ByReference {
		
	};
	public static class ByValue extends ByteIOContext implements Structure.ByValue {
		
	};
}
